const fs = require("fs");
const path = require("path");

const src = process.argv[2] ?? "./";
const pattern = process.argv[3] ? new RegExp(`${process.argv[3]}$`) : /.nabil$/;
const newExtension = process.argv[4] ?? ".nabilaba";
const comment = process.argv[5] ?? "";
const getAllFiles = (dirPath, pattern, files = []) => {
  const filesInDirectory = fs.readdirSync(dirPath);
  return filesInDirectory.reduce((foundFiles, file) => {
    if (fs.statSync(`${dirPath}/${file}`).isDirectory()) {
      return getAllFiles(`${dirPath}/${file}`, pattern, foundFiles);
    } else {
      if (!matchPattern(file, pattern)) {
        return foundFiles;
      }
      return [...foundFiles, path.join(__dirname, dirPath, "/", file)];
    }
  }, files);
};
const matchPattern = (filename, pattern) => filename.match(pattern);
const readFile = (path) => fs.readFileSync(path).toString("utf-8");
const renameFile = (path, extension) => {
  try {
    fs.renameSync(path, path.replace(pattern, extension));
    console.log(`${path} [RENAMED]`);
    return true;
  } catch (error) {
    console.log(`${path} [KO]`, error);
    return false;
  }
};

const newFile = (content) => /(<\/|\/>)/.test(content);
const files = getAllFiles(src, pattern)
  .map((file) => ({ filename: file, content: readFile(file) }))
  .filter((file) => newFile(file.content))
  .map((file) => file.filename);
if (files.length !== 0) {
  if (comment == "--nocomment") {
    const successFiles = files
      .map((file) => renameFile(file, newExtension))
      .filter(Boolean);
  } else {
    console.log("File Ditemukan", files.length);
    console.log("Mengganti Format File...");
    const successFiles = files
      .map((file) => renameFile(file, newExtension))
      .filter(Boolean);
    console.log(`File ${successFiles.length}/${files.length} sukses diganti.`);
    if (successFiles.length !== files.length) {
      console.log("error.");
      process.exit(1);
    }
  }
}
